using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Drawing.Printing;


namespace Database
{
	/// <summary>
	/// PrinterHelper is used to print an order.
	/// </summary>
    public class OfferPrinterHelper : PrinterHelper
    {
		/// <summary>
		/// Initialize a new instance of PrinterHelper
		/// </summary>
		/// <param name="order"></param>
        public OfferPrinterHelper(string header1, string header2, string header3, string header4, string header5, string header6)
            : base(header1, header2, header3, header4, header5, header6)
        {
            
            _lineSkip = 0;
        }

        
        Order _order;
        double _lineSkip;

		/// <summary>
		/// Print a single page. Run this call every time PrintPage is called in PrintingDocument.
		/// V. 1.1: Added support for printing range.
		/// </summary>
		/// <param name="e">Print Page events. Needed for printing.</param>
        public void PrintPage(PrintPageEventArgs e)
        {
			//Check for printing range.
			if (!this.PrinterStartRangeOk(e))
            {
				e.Cancel = true;
				return;
			}

            this.PrepareForPrinting(e);

            
            float[] colsX = new float[] { _pageBounds.X, 
				_pageBounds.X + _pageWidth * 0.123783783f, 
				_pageBounds.X + _pageWidth * 0.733513513f, 
				_pageBounds.X + _pageWidth * 0.81513513f, 
				_pageBounds.X + _pageWidth * 0.89189189f, 
				_pageBounds.Right };
            float tableHeadY = _pageBounds.Y + _pageHeight * 0.016592f * 11 + 4;

            PrintHeader();


            //BORDER
            _pageGraphics.FillRectangle(Brushes.LightGray,
                new Rectangle(_pageBounds.X, Convert.ToInt32(tableHeadY),
                _pageBounds.Width, Convert.ToInt32(_pageLineHeight)));

            //Print header information
            _pageGraphics.DrawString("Vörunúmer:", _pageFont, _pageBrush, new RectangleF(colsX[0], tableHeadY, colsX[1] - colsX[0], _pageLineHeight));
            _pageGraphics.DrawString("Lýsing:", _pageFont, _pageBrush, new RectangleF(colsX[1], tableHeadY, colsX[2] - colsX[1], _pageLineHeight));
            if (_page != 0)
                _pageGraphics.DrawString("Verð:", _pageFont, _pageBrush, new RectangleF(colsX[2], tableHeadY, colsX[3] - colsX[2], _pageLineHeight));
            _pageGraphics.DrawString("Magn:", _pageFont, _pageBrush, new RectangleF(colsX[3], tableHeadY, colsX[4] - colsX[3], _pageLineHeight));
            if (_page != 0)
                _pageGraphics.DrawString("Upphæð:", _pageFont, _pageBrush, new RectangleF(colsX[4], tableHeadY, colsX[5] - colsX[4], _pageLineHeight));

            _lineSkip = 0;

            //Print each and every item in order
            for (int item = 0; item < _order.Items.Count; item++)
            {
                PrintItemDetails(colsX, tableHeadY, item);
            }
            _lineSkip += 1;

            //Print the global discount information
            if (_order.GlobalDiscount.Type != DiscountType.None)
            {
                PrintGlobalDiscount(colsX, tableHeadY);
            }

            _pageGraphics.DrawString("Samtals:", _pageFont, _pageBrush, colsX[2] - 60, _pageBounds.Y + _pageLineHeight * 54 + 4);


            // Búa til streng yfir öll vsk sem eru möguleg, ef vsk af einhverri tegund er 0, þá birtir hún það ekki
            StringBuilder build = new StringBuilder("Án vsk:\n");
			StringBuilder build2 = new StringBuilder("");
            long total = _order.Items.Total(_order.GlobalDiscount);
            long vsk_245 = _order.Items.TotalVsk(_order.GlobalDiscount, ItemVsk.items_245);
            long vsk_7 = _order.Items.TotalVsk(_order.GlobalDiscount, ItemVsk.books_7);
            long vsk_0 = _order.Items.TotalVsk(_order.GlobalDiscount, ItemVsk.other_0);
            long totalVsk = vsk_245 + vsk_7 + vsk_0;
			build2.AppendFormat("{0:#,0}\n", total - totalVsk);
			if (vsk_245 != 0)
			{
				build.Append("Vsk 24,5%:\n");
				build2.AppendFormat("{0:#,0}\n", vsk_245);
			}
			if (vsk_7 != 0)
			{
				build.Append("Vsk 7%:\n");
				build2.AppendFormat("{0:#,0}\n", vsk_7);
			}
			if (vsk_245 == 0 && vsk_7 == 0)
			{
				build.Append("Vsk:\n");
				build2.Append("0\n");
			}
            build.Append("Alls:\n\n");
			build2.AppendFormat("{0:#,0}\n", total);
			build2.Append("======");
			_pageGraphics.DrawString(build.ToString(), _pageFont, _pageBrush, colsX[2], _pageBounds.Y + _pageLineHeight * 54 + 4);
            _pageGraphics.DrawString(build2.ToString(), _pageFont, _pageBrush, new RectangleF(_pageBounds.X + _pageWidth * 0.89189189f,
                                                                                   _pageBounds.Y + _pageHeight * 0.016592f * 54 + 4,
                                                                                   _pageWidth * 0.10918918f,
                                                                                   _pageHeight), _pageRightAligned);

            int addExtra = 0;
            if (_order.Payment.Count > 2)
                addExtra = _order.Payment.Count - 2;
            long totalPayment = 0;
            build.Remove(0, build.Length);
			build2.Remove(0, build2.Length);
            build.Append("Greiðslumáti:\n");
			build2.Append("\n");
            foreach (OrderPayment payment in _order.Payment)
            {
				if (payment.Name != "")
				{
					build.AppendFormat("{0}:\n", payment.Name);
					build2.AppendFormat("{0:#,0}\n", payment.Amount);
					totalPayment += payment.Amount;
				}
            }
            if (totalPayment > total)
            {
                build.Append("Til baka:");
				build2.AppendFormat("-{0:#,0}\n", totalPayment - total);
            }
            _pageGraphics.DrawString(build.ToString(),
                            _pageFont,
                            _pageBrush,
                            _pageBounds.X,
                            _pageBounds.Y + _pageHeight * 0.016592f * (54 - addExtra) + 4);
            _pageGraphics.DrawString(build2.ToString(),
                            _pageFont,
                            _pageBrush,
                            new RectangleF(_pageBounds.X,
                                           _pageBounds.Y + _pageHeight * 0.016592f * (54 - addExtra) + 4,
                                           _pageWidth * 0.30918918f,
                                           _pageHeight), _pageRightAligned);


            PrintFooter();


			//This part specifies whether a new page should be printed.
			//It encapsulates the page attribute and then manipulates the HasMorePage variable

			//Check if we have printed all pages
            if (_page >= 3 || (_page == 0 && !_order.PrintTwoCopies))
                e.HasMorePages = false;
			//Check if a new page should be printed if the order is a deal
            else if (_order.PrintTwoCopies && _page == 0)
            {
                _page = 2;

				//Verifie whether or not a new page should be printed if a specific range has been specified
				if (e.PageSettings.PrinterSettings.PrintRange == PrintRange.SomePages)
				{
					//If the last page is not this one, then we can continue :)
					if (e.PageSettings.PrinterSettings.ToPage != _page)
						e.HasMorePages = true;
				}
				else
					e.HasMorePages = true;
            }
			//Check if a new page should be printed if the order is just a normal order
            else
            {
				//Verifie whether or not a new page should be printed if a specific range has been specified
				if (e.PageSettings.PrinterSettings.PrintRange == PrintRange.SomePages)
				{
					//If the last page is not this one, then we can continue :)
					if (e.PageSettings.PrinterSettings.ToPage != _page)
						e.HasMorePages = true;
				}
				else
					e.HasMorePages = true;
            }
            _page++;
        }

        private void PrintGlobalDiscount(float[] colsX, float tableHeadY)
        {
            float currentRowY = Convert.ToSingle(tableHeadY + _pageLineHeight * (2 + _order.Items.Count + _lineSkip) + (_lineSkip + _order.Items.Count) * 3);

            _pageGraphics.DrawString(_order.GlobalDiscount.Text,
                _pageFont,
                _pageBrush,
                new RectangleF(colsX[1], currentRowY, colsX[2] - colsX[1], _pageLineHeight));

            if (_order.GlobalDiscount.Type == DiscountType.Percent)
            {
                _pageGraphics.DrawString(string.Format("{0}{1}", _order.GlobalDiscount.PercentDiscount, "%"),
                    _pageFont,
                    _pageBrush,
                    new RectangleF(colsX[3], currentRowY, colsX[4] - colsX[3], _pageLineHeight),
                    _pageRightAligned);

                _pageGraphics.DrawString(string.Format("{0:#,0}", _order.Items.Total(_order.GlobalDiscount) - _order.Items.Total(_order.GlobalDiscount, false)),
                    _pageFont,
                    _pageBrush,
                    new RectangleF(colsX[4], currentRowY, colsX[5] - colsX[4], _pageLineHeight),
                    _pageRightAligned);
            }
            else
            {
                _pageGraphics.DrawString(string.Format("{0:#,0}", -_order.GlobalDiscount.CoinDiscount),
                    _pageFont,
                    _pageBrush,
                    new RectangleF(colsX[4], currentRowY, colsX[5] - colsX[4], _pageLineHeight),
                    _pageRightAligned);
            }
        }
        private void PrintFooter()
        {
            Font fontBold = new Font(_pageFont, FontStyle.Bold);

            if (_page != 0 && !_order.PrintTwoCopies)
            {
                if (_order.Abyrgd == -1)
                {
                    _pageGraphics.DrawString("Lífstíðarábyrgð",
                        _pageFont,
                        _pageBrush,
                        _pageBounds.X,
                        _pageBounds.Y + _pageLineHeight * 58 + 4);
                }
                else
                {
                    _pageGraphics.DrawString(string.Format("{0} ára ábyrgð", _order.Abyrgd),
                        _pageFont,
                        _pageBrush,
                        _pageBounds.X,
                        _pageBounds.Y + _pageLineHeight * 58 + 4);
                }
            }

            switch (_page)
            {
                case 1:
                    _pageGraphics.DrawString("Frumrit, gildir einnig sem ábyrgðarskírteini", fontBold, _pageBrush, _pageBounds.X, _pageBounds.Y + _pageLineHeight * 59 + 4);
                    break;
                case 2:
                    _pageGraphics.DrawString("Samrit fyrir bókhald", fontBold, _pageBrush, _pageBounds.X, _pageBounds.Y + _pageLineHeight * 59 + 4);
                    break;
                case 3:
                    _pageGraphics.DrawString("Eintak Söluaðila", fontBold, _pageBrush, _pageBounds.X, _pageBounds.Y + _pageLineHeight * 59 + 4);
                    break;
            }
            //_pageGraphics.DrawString("Tilboð, gildir í 7 daga", fontBold, _pageBrush, _pageBounds.X, _pageBounds.Y + _pageLineHeight * 55 + 4);
        }

        private void PrintHeader()
        {
            _pageGraphics.DrawImage(Image.FromFile("logo.png"), new Rectangle(_pageBounds.X, _pageBounds.Y, Convert.ToInt32(_pageWidth * 0.47), Convert.ToInt32(_pageHeight * 0.07632)));
            _pageGraphics.DrawString(string.Format("{0}\n{1}\n{2}", _header1, _header2, _header3), _pageFont, _pageBrush, _pageBounds.X + _pageWidth * 0.48f, _pageBounds.Y);
            _pageGraphics.DrawString(string.Format("{0}\n{1}\n{2}", _header4, _header5, _header6), _pageFont, _pageBrush, _pageBounds.X + _pageWidth * 0.7435135f, _pageBounds.Y);
            _pageGraphics.DrawString("Dagsetning:\nTími:\nStarfsmaður:", _pageFont, _pageBrush, _pageBounds.X + _pageWidth * 0.48f, _pageBounds.Y + _pageHeight * 0.1021f);
            _pageGraphics.DrawString(string.Format("{0}\n{1}\n{2}", 
                             DateTime.Now.ToShortDateString(), 
                             DateTime.Now.ToShortTimeString(), 
                             Database.GetDB.Users[_order.UserID, true].Name), 
                _pageFont, 
                _pageBrush, 
                new RectangleF(_pageBounds.X + _pageWidth * 0.48f, _pageBounds.Y + _pageHeight * 0.1021f, (_pageBounds.X + _pageWidth * 0.8435135f) - (_pageBounds.X + _pageWidth * 0.48f), _pageLineHeight * 3),
                _pageRightAligned);

            _pageGraphics.DrawLine(Pens.Black, new Point(_pageBounds.X, _pageBounds.Y + Convert.ToInt32(_pageHeight * 0.07632) + 2), new Point(_pageBounds.X + _pageBounds.Width, _pageBounds.Y + Convert.ToInt32(_pageHeight * 0.07632) + 2));
            
            if (_page != 0 && !_order.PrintTwoCopies)
            {
				if (!string.IsNullOrEmpty(_order.Customer.Kennitala))
				{
					if (_order.Customer.Kennitala.Length == 10)
						_order.Customer.Kennitala = _order.Customer.Kennitala.Insert(6, "-");
                    _pageGraphics.DrawString(string.Format("Kt. {0}", _order.Customer.Kennitala),
							_pageFont,
							_pageBrush,
							_pageBounds.X + 30,
							_pageBounds.Y + _pageLineHeight * 6);
				}

                _pageGraphics.DrawString(string.Format("{0}", _order.Customer.Name),
                        _pageFont,
                        _pageBrush,
                        _pageBounds.X + 30,
                        _pageBounds.Y + _pageLineHeight * 7);

                _pageGraphics.DrawString(string.Format("{0} {1}", _order.Customer.Address1, _order.Customer.Address2),
                        _pageFont,
                        _pageBrush,
                        _pageBounds.X + 30,
                        _pageBounds.Y + _pageLineHeight * 8);

                _pageGraphics.DrawString(string.Format("{0} {1}", _order.Customer.Zip, _order.Customer.City),
                        _pageFont,
                        _pageBrush,
                        _pageBounds.X + 30,
                        _pageBounds.Y + _pageLineHeight * 9);
            }
        }

        private void PrintItemDetails(float[] colsX, float tableHeadY, int item)
        {
            float currentRowY = Convert.ToSingle(tableHeadY + _pageLineHeight * (2 + item + _lineSkip) + (_lineSkip + item) * 3);
            Font italic = new Font(_pageFont, FontStyle.Italic);

            if (_order.Items[item].Price == 0)
                _pageFont = italic;

            _pageGraphics.DrawString(_order.Items[item].Vorunr,
                _pageFont,
                _pageBrush,
                new RectangleF(colsX[0], currentRowY, colsX[1] - colsX[0], _pageLineHeight));

			_pageGraphics.DrawString(_order.Items[item].Name,
				_pageFont,
				_pageBrush,
				new RectangleF(colsX[1], currentRowY, colsX[2] - colsX[1], _pageLineHeight));

            if (!string.IsNullOrEmpty(_order.Items[item].SubName))
            {
                _pageGraphics.DrawString(string.Format("     {0}", _order.Items[item].SubName),
							new Font(_pageFont.FontFamily, 8.5f),
                            _pageBrush,
                            new RectangleF(colsX[1], Convert.ToSingle(tableHeadY + _pageLineHeight * (2 + item + _lineSkip + 1) + (_lineSkip + item) * 3), colsX[2] - colsX[1], _pageLineHeight));
                _lineSkip += 0.8f;
            }

			foreach (OrderItem subItem in _order.Items[item].SubItems)
			{
				float subItemRowY = Convert.ToSingle(tableHeadY + _pageLineHeight * (2 + item + _lineSkip + 1) + (_lineSkip + item) * 3);
				Font subFont = new Font(_pageFont.FontFamily, 8.5f, FontStyle.Italic);

				_pageGraphics.DrawString(subItem.Vorunr, subFont, _pageBrush, new RectangleF(colsX[0], subItemRowY, colsX[1] - colsX[0], _pageLineHeight));
				_pageGraphics.DrawString(string.Format("     {0}", subItem.Name), subFont, _pageBrush, new RectangleF(colsX[1], subItemRowY, colsX[2] - colsX[1], _pageLineHeight));
				_pageGraphics.DrawString(subItem.Count.ToString(), subFont, _pageBrush, new RectangleF(colsX[3], subItemRowY, colsX[4] - colsX[3], _pageLineHeight), _pageRightAligned);

				_lineSkip += 0.8f;
			}

			_pageGraphics.DrawString(_order.Items[item].Count.ToString(),
				_pageFont,
				_pageBrush,
				new RectangleF(colsX[3], currentRowY, colsX[4] - colsX[3], _pageLineHeight),
				_pageRightAligned);

			if (!_order.HidePrice && _order.Items[item].Price != 0)
			{
				_pageGraphics.DrawString(string.Format("{0:#,0}", _order.Items[item].Price),
					_pageFont,
					_pageBrush,
					new RectangleF(colsX[2], currentRowY, colsX[3] - colsX[2], _pageLineHeight),
					_pageRightAligned);

				_pageGraphics.DrawString(string.Format("{0:#,0}", _order.Items[item].Count * _order.Items[item].Price),
					_pageFont,
					_pageBrush,
					new RectangleF(colsX[4], currentRowY, colsX[5] - colsX[4], _pageLineHeight),
					_pageRightAligned);
			}

            PrintDiscountRow(_order.Items[item].Discount, _order.Items[item].Price * _order.Items[item].Count, colsX, ref currentRowY, tableHeadY, item);
            if (_order.Items[item].Warranty.Type != WarrantyType.Default)
            {
                _lineSkip += 0.9f;
                currentRowY = Convert.ToSingle(tableHeadY + _pageLineHeight * (2 + item + _lineSkip) + (_lineSkip + item) * 3);

                if (_order.Items[item].Warranty.Type == WarrantyType.LifeTime)
                    _pageGraphics.DrawString("    Lífstíðarábyrgð fylgir þessari vöru.", italic, _pageBrush, new RectangleF(colsX[1], currentRowY, colsX[2] - colsX[1], _pageLineHeight));
                else
                    _pageGraphics.DrawString(string.Format("    Ábyrgð í allt að {0} ár fylgir þessari vöru.", _order.Items[item].Warranty.Years), italic, _pageBrush, new RectangleF(colsX[1], currentRowY, colsX[2] - colsX[1], _pageLineHeight)); ;
            }
        }

        private void PrintDiscountRow(Discount discount, double totalPrice, float[] colsX, ref float currentRowY, float tableHeadY, int item)
        {
            Font italic = new Font(_pageFont, FontStyle.Italic);
            if (discount.Type != DiscountType.None && _page != 0)
            {
                _lineSkip += 0.9f;
                currentRowY = Convert.ToSingle(tableHeadY + _pageLineHeight * (2 + item + _lineSkip) + (_lineSkip + item) * 3);

                if (discount.Type == DiscountType.Coin)
                {
                    _pageGraphics.DrawString("    Afsláttur", italic, _pageBrush, new RectangleF(colsX[1], currentRowY, colsX[2] - colsX[1], _pageLineHeight));
                    _pageGraphics.DrawString(string.Format("-{0:#,0}", discount.CoinDiscount), italic, _pageBrush, new RectangleF(colsX[4], currentRowY, colsX[5] - colsX[4], _pageLineHeight), _pageRightAligned);
                }
                else
                {
                    _pageGraphics.DrawString("    Afsláttur", italic, _pageBrush, new RectangleF(colsX[1], currentRowY, colsX[2] - colsX[1], _pageLineHeight));
                    _pageGraphics.DrawString(string.Format("{0}%", discount.PercentDiscount), italic, _pageBrush, new RectangleF(colsX[3], currentRowY, colsX[4] - colsX[3], _pageLineHeight), _pageRightAligned);
                    _pageGraphics.DrawString(string.Format("-{0:#,0}", discount.PercentDiscount / 100.0 * totalPrice), italic, _pageBrush, new RectangleF(colsX[4], currentRowY, colsX[5] - colsX[4], _pageLineHeight), _pageRightAligned);
                }
            }
        }

		public Order Order
		{
			get { return _order; }
			set { _order = value; }
		}
	}
}
